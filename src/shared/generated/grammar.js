/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,8,9,17,25,28,29,43],$V1=[1,24],$V2=[1,43],$V3=[1,35],$V4=[1,41],$V5=[1,42],$V6=[1,31],$V7=[1,32],$V8=[1,36],$V9=[1,37],$Va=[1,48],$Vb=[5,8,9,17,20,25,28,29,36,41,43,45],$Vc=[5,8,9,17,25,28,29,34,43],$Vd=[20,41],$Ve=[5,8,9,17,25,28,29,36,43],$Vf=[5,8,9,17,25,28,29,36,41,43],$Vg=[36,41],$Vh=[1,105],$Vi=[1,106],$Vj=[1,108];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"start":3,"document":4,"EOF":5,"line":6,"statements":7,"NewLine":8,"PLUS":9,"INITIAL_STATE":10,"BY_PASS":11,"CONTEXT_STATEMENT":12,"EMIT_STATEMENT":13,"SUBSCRIBE_STATEMENT":14,"DEFINE_STATEMENT":15,"EXPRESSION_STATEMENT":16,"CONTEXT_SYMBOL":17,"LEFT_BRACE":18,"RAW_KEYLIST":19,"RIGHT_BRACE":20,"LEFT_ARROW":21,"KEY_LIST":22,"EMIT_EVENT":23,"KEY_LIST_STATEMENT":24,"EMIT":25,"IDENT":26,"SUBSCRIBE_EVENT":27,"SUBSCRIBE":28,"DEFINE":29,"DEFINE_ARGUMENTS":30,"RIGHT_ARROW":31,"DEFINE_FUNCTION":32,"FUNCTION_NAME":33,"LEFT_BRACKET":34,"DEFINE_FUNCTION_ARGUMENTS":35,"RIGHT_BRACKET":36,"DEFINE_FUNCTION_VALUE":37,"IMMUTABLE":38,"CONSTANT":39,"EXPRESSION_DEFINE":40,"COMMA":41,"DEFINE_ARGUMENTS_TYPES":42,"ASSIGN":43,"EXPRESSION":44,"QUESTION_MARK":45,"KEY_ITEM":46,"DATA_OBJECT":47,"FUNCTION":48,"RAW_KEYITEM":49,"ARGUMENTS":50,"DATA_OBJECT_REFERENCE":51,"PAYLOAD_REFERENCE":52,"CONTEXT_REFERENCE":53,"CONSTANT_SYMBOL":54,"DOLLAR_SYMBOL":55,"ARRAY":56,"STRING":57,"NUMBER":58,"INTEGER":59,"DECIMAL":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"NewLine",9:"PLUS",10:"INITIAL_STATE",11:"BY_PASS",17:"CONTEXT_SYMBOL",18:"LEFT_BRACE",20:"RIGHT_BRACE",21:"LEFT_ARROW",25:"EMIT",26:"IDENT",28:"SUBSCRIBE",29:"DEFINE",31:"RIGHT_ARROW",33:"FUNCTION_NAME",34:"LEFT_BRACKET",36:"RIGHT_BRACKET",41:"COMMA",43:"ASSIGN",45:"QUESTION_MARK",54:"CONSTANT_SYMBOL",55:"DOLLAR_SYMBOL",56:"ARRAY",57:"STRING",59:"INTEGER",60:"DECIMAL"},
productions_: [0,[3,2],[4,0],[4,2],[6,1],[6,1],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[12,4],[12,6],[13,1],[13,2],[13,7],[23,2],[14,1],[14,2],[14,4],[27,3],[15,5],[32,4],[32,3],[32,1],[37,1],[37,1],[35,1],[35,3],[40,1],[40,1],[40,1],[40,4],[40,3],[30,2],[30,3],[42,1],[42,3],[16,3],[24,3],[22,1],[22,3],[46,1],[46,1],[46,1],[19,1],[19,3],[49,1],[49,3],[48,4],[48,3],[50,1],[50,3],[47,3],[47,1],[44,1],[44,1],[44,1],[51,1],[51,1],[51,1],[39,2],[52,2],[53,2],[38,1],[38,1],[38,1],[58,1],[58,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
this.$={defines:[], contextDescription:[],emit:[],subscribe:[],initialState:false,byPass:false}
break;
case 3:

           if($$[$0] !== '\n') {
              if($$[$0].hasOwnProperty('initialState')){
                $$[$0-1]['initialState'] = true
              }
              if($$[$0].hasOwnProperty('byPass')){
                $$[$0-1]['byPass'] = true
              }
              if($$[$0].hasOwnProperty('context'))  $$[$0-1]['contextDescription'].push($$[$0])
              if($$[$0].hasOwnProperty('emit')) $$[$0-1]['emit'].push($$[$0]['emit'])
              if($$[$0].hasOwnProperty('subscribe')) $$[$0-1]['subscribe'].push($$[$0]['subscribe'])
              if($$[$0].hasOwnProperty('define')) $$[$0-1]['defines'].push($$[$0]['define'])
              if($$[$0].hasOwnProperty('expression')) { this.$ = $$[$0] }
           }
        
break;
case 6:
this.$ = {initialState:true}
break;
case 7:
this.$ = {byPass:true}
break;
case 11:
this.$ = {define:$$[$0]}
break;
case 12:
this.$ = {expression: $$[$0]}
break;
case 13:
this.$ = {context:$$[$0-1]} 
break;
case 14:

                  if($$[$0].length > $$[$0-3].length) {
                        throw new Error('The number of arguments must be equal to or less than the number of context arguments.')}; this.$ = {context: $$[$0-3], reducer:$$[$0]}
break;
case 15:
this.$ = {emit:{...$$[$0]}}
break;
case 16:
 this.$ = {emit:{...$$[$0-1], meta:[...$$[$0]]}} 
break;
case 17:
 this.$ = {emit:{ ...$$[$0-6], meta: $$[$0-5], context:[...$$[$0-1]] }}
break;
case 18:
 this.$ = {identifier:$$[$0]}
break;
case 19:
 this.$ = {subscribe:$$[$0]}
break;
case 20:
 this.$ = {subscribe:{payload:$$[$0],...$$[$0-1]}}
break;
case 21:
 this.$ = {subscribe:{...$$[$0-3],meta:$$[$0], payload:$$[$0-2]}}
break;
case 22:
 this.$ = {identifier:$$[$0-1], actionName:$$[$0]}
break;
case 23:
this.$ = {identifier:$$[$0-3], ...$$[$0-2], expression:$$[$0]}
break;
case 24: case 34: case 51:
this.$ = { expressionType:ExpressionTypes.Function,FunctionDeclaration: { FunctionName:$$[$0-3], Arguments:[...$$[$0-1]]} } 
break;
case 25: case 35: case 52:
this.$ = { expressionType:ExpressionTypes.Function, FunctionDeclaration: { FunctionName:$$[$0-2], Arguments:[] } } 
break;
case 29: case 42: case 47: case 53:
this.$ = [$$[$0]]
break;
case 30: case 54:
 this.$ = [...$$[$0-2], $$[$0]] 
break;
case 33:
this.$ = {expressionType:ExpressionTypes.Identifier, identifier:$$[$0]}
break;
case 36:
this.$ = {Arguments:[]}
break;
case 37:
this.$ = {Arguments:[...$$[$0-1]]}
break;
case 38:
this.$ = $$[$0]
break;
case 39: case 43:
this.$ = [$$[$0-2]].concat($$[$0])
break;
case 40:
this.$ = $$[$0-1]
break;
case 41:
 this.$ = $$[$0-1]
break;
case 44:
this.$ = {keyItem:{...$$[$0]}}
break;
case 45: case 46:
this.$ = {keyItem:{expression:$$[$0]}}
break;
case 48:
this.$ =[$$[$0-2]].concat($$[$0])
break;
case 49:
this.$ = {keyItem:{identifier:$$[$0]}}
break;
case 50:
this.$ = {keyItem:{identifier: $$[$0-2],  expression: $$[$0]}}
break;
case 55:
 this.$ = {...$$[$0-2], expression:$$[$0]}
break;
case 59:
counter = Math.max(calcDepthFunc($$[$0]), counter);
                if(counter > maxNestedFuncLevel) {
                    counter = 0;
                    throw new Error('nested limit');
                }
break;
case 63:
this.$ = {expressionType:ExpressionTypes.Constant, identifier:$$[$0]}
break;
case 64:
 this.$ = {expressionType:ExpressionTypes.Payload, identifier: $$[$0] } 
break;
case 65:
this.$ = {expressionType:ExpressionTypes.Context, identifier:$$[$0] } 
break;
case 66:
this.$ = { ArrayDeclaration:[], expressionType:ExpressionTypes.ArrayDeclaration} 
break;
case 67:
this.$ = {StringDeclaration:$$[$0].toString(), expressionType:ExpressionTypes.StringDeclaration}
break;
case 69:
this.$ = { NumberDeclaration: Number($$[$0]), expressionType: ExpressionTypes.IntegerDeclaration} 
break;
case 70:
this.$ = { NumberDeclaration: Number($$[$0]), expressionType:ExpressionTypes.DecimalDeclaration} 
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:[1,6],9:[1,7],12:8,13:9,14:10,15:11,16:12,17:[1,13],23:14,25:[1,18],27:15,28:[1,19],29:[1,16],43:[1,17]},{1:[2,1]},o($V0,[2,3]),o($V0,[2,4]),o($V0,[2,5]),{10:[1,20],11:[1,21]},o($V0,[2,8]),o($V0,[2,9]),o($V0,[2,10]),o($V0,[2,11]),o($V0,[2,12]),{18:[1,22]},o($V0,[2,15],{24:23,34:$V1}),o($V0,[2,19],{24:25,34:$V1}),{26:[1,26]},{17:$V2,33:$V3,38:28,39:38,44:27,47:29,48:30,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},{26:[1,44]},{26:[1,45]},o($V0,[2,6]),o($V0,[2,7]),{19:46,26:$Va,49:47},o($V0,[2,16],{21:[1,49]}),{17:$V2,22:50,33:$V3,38:53,39:38,46:51,47:52,48:54,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},o($V0,[2,20],{21:[1,55]}),{30:56,34:[1,57]},{45:[1,58]},o($Vb,[2,57]),o($Vb,[2,58]),o($Vb,[2,59]),o($Vb,[2,66]),o($Vb,[2,67]),o($Vb,[2,68]),o([5,8,9,17,20,25,28,29,36,41,45],[2,56],{43:[1,59]}),{34:[1,60]},o($Vb,[2,69]),o($Vb,[2,70]),o($Vb,[2,60]),o($Vb,[2,61]),o($Vb,[2,62]),{26:[1,61]},{26:[1,62]},{26:[1,63]},o($Vc,[2,18]),{26:[1,64]},{20:[1,65]},{20:[2,47],41:[1,66]},o($Vd,[2,49],{43:[1,67]}),{17:[1,68]},{36:[1,69]},o($Ve,[2,42],{41:[1,70]}),o($Vf,[2,44]),o($Vf,[2,45]),o($Vf,[2,46]),{24:71,34:$V1},{31:[1,72]},{26:[1,75],36:[1,73],42:74},o($V0,[2,40]),{17:$V2,33:$V3,38:28,39:38,44:76,47:29,48:30,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},{17:$V2,33:$V3,36:[1,78],38:28,39:38,44:79,47:29,48:30,50:77,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},o($Vb,[2,63]),o($Vb,[2,64]),o($Vb,[2,65]),o($Vc,[2,22]),o($V0,[2,13],{21:[1,80]}),{19:81,26:$Va,49:47},{17:$V2,33:$V3,38:28,39:38,44:82,47:29,48:30,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},{18:[1,83]},o([5,8,9,17,21,25,28,29,43],[2,41]),{17:$V2,22:84,33:$V3,38:53,39:38,46:51,47:52,48:54,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},o($V0,[2,21]),{32:85,33:[1,86],37:87,38:88,39:89,54:$V4,56:$V6,57:$V7,58:33,59:$V8,60:$V9},{31:[2,36]},{36:[1,90],41:[1,91]},o($Vg,[2,38]),o($Vb,[2,55]),{36:[1,92],41:[1,93]},o($Vb,[2,52]),o($Vg,[2,53]),{17:$V2,22:94,33:$V3,38:53,39:38,46:51,47:52,48:54,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},{20:[2,48]},o($Vd,[2,50]),{19:95,26:$Va,49:47},o($Ve,[2,43]),o($V0,[2,23]),{34:[1,96]},o($V0,[2,26]),o($V0,[2,27]),o($V0,[2,28]),{31:[2,37]},{26:[1,97]},o($Vb,[2,51]),{17:$V2,33:$V3,38:28,39:38,44:98,47:29,48:30,51:34,52:39,53:40,54:$V4,55:$V5,56:$V6,57:$V7,58:33,59:$V8,60:$V9},o($V0,[2,14]),{20:[1,99]},{26:$Vh,33:$Vi,35:100,36:[1,101],38:103,39:104,40:102,54:$V4,56:$V6,57:$V7,58:33,59:$V8,60:$V9},o($Vg,[2,39]),o($Vg,[2,54]),o($V0,[2,17]),{36:[1,107],41:$Vj},o($V0,[2,25]),o($Vg,[2,29]),o($Vg,[2,31]),o($Vg,[2,32]),o($Vg,[2,33]),{34:[1,109]},o($V0,[2,24]),{26:$Vh,33:$Vi,38:103,39:104,40:110,54:$V4,56:$V6,57:$V7,58:33,59:$V8,60:$V9},{26:$Vh,33:$Vi,35:111,36:[1,112],38:103,39:104,40:102,54:$V4,56:$V6,57:$V7,58:33,59:$V8,60:$V9},o($Vg,[2,30]),{36:[1,113],41:$Vj},o($Vg,[2,35]),o($Vg,[2,34])],
defaultActions: {3:[2,1],73:[2,36],81:[2,48],90:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    self.lexDebugger = [];
    self.parserDebugger = [];
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            if (self.lexDebugger) {
                var tokenName = Object.keys(self.symbols_).filter(function (x) {
                        return self.symbols_[x] === token;
                    });
                var tokenText = lexer.match;
                self.lexDebugger.push({
                    tokenName: tokenName,
                    tokenText: tokenText
                });
            }
            return token;
        }
    function getNonTerminalFromCode(targetCode, symbols) {
        for (var key in symbols) {
            if (!symbols.hasOwnProperty(key)) {
                continue;
            }
            if (symbols[key] === targetCode) {
                return key;
            }
        }
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            if (self.parserDebugger) {
                self.parserDebugger.push({
                    action: 'shift',
                    text: lexer.yytext,
                    terminal: this.terminals_[symbol]
                });
            }
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (len && self.parserDebugger) {
                var prereduceValue = vstack.slice(vstack.length - len, vstack.length);
                var debuggableProductions = [];
                for (var debugIdx = len - 1; debugIdx >= 0; debugIdx--) {
                    var debuggableProduction = getNonTerminalFromCode(stack[stack.length - (debugIdx + 1) * 2], this.symbols_);
                    debuggableProductions.push(debuggableProduction);
                }
                var currentNonterminalCode = this.productions_[action[1]][0];
                var currentNonterminal = getNonTerminalFromCode(currentNonterminalCode, this.symbols_);
                self.parserDebugger.push({
                    action: 'reduce',
                    nonterminal: currentNonterminal,
                    prereduce: prereduceValue,
                    result: r,
                    productions: debuggableProductions,
                    text: yyval.$
                });
            }
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            if (self.parserDebugger) {
                self.parserDebugger.push({ action: 'accept' });
                console.log(self.parserDebugger[self.parserDebugger.length - 1]);
            }
            return true;
        }
    }
    return true;
}};

  var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
            
// src/constants/index.ts
var ReservedList = ["end note, +INITIAL"];
var SpecialCharList = [
  "!",
  "@",
  "$",
  // Нужны двойные кавычки, т.к при одинарных некорректно импортируется в грамматику
  "%",
  "^",
  "&",
  "*",
  '"',
  "№",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  "+",
  "-",
  "=",
  ";",
  ":",
  "?",
  ".",
  ",",
  "/",
  "\\",
  "|"
];
var ExpressionTypes = {
  Function: "function",
  StringDeclaration: "string",
  ArrayDeclaration: "array",
  IntegerDeclaration: "integer",
  DecimalDeclaration: "decimal",
  FunctionProperty: "FunctionProperty",
  Constant: "constant",
  Payload: "payload",
  Context: "context",
  Identifier: "identifier"
};
var maxNestedFuncLevel = 8;

// src/grammar/jsGrammar.ts
var calcDepthFunc = recursiveDepth();
function recursiveDepth() {
  let counterDepth = 1;
  return (funcObj) => {
    const args = funcObj.FunctionDeclaration.Arguments;
    const funcArgs = args.filter((item) => "FunctionDeclaration" in item);
    if (args.length === 0 || funcArgs.length === 0) {
      return 1;
    } else {
      const arrArgs = [];
      for (const func of funcArgs) {
        arrArgs.push(calcDepthFunc(func));
      }
      counterDepth = Math.max(...arrArgs) + 1;
      return counterDepth;
    }
  };
}
__name(recursiveDepth, "recursiveDepth");
 {
  ExpressionTypes,
  ReservedList,
  SpecialCharList,
  calcDepthFunc,
  maxNestedFuncLevel
};
//# sourceMappingURL=jsGrammar.js.map

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:return 8;
break;
case 2:return 54;
break;
case 3:/* skip all whitespace */
break;
case 4:return 33;
break;
case 5:return 28
break;
case 6:return 25
break;
case 7:return 29
break;
case 8:return 10
break;
case 9:return 11
break;
case 10:return 26
break;
case 11:return 9
break;
case 12:return 18
break;
case 13:return 20
break;
case 14:return 17
break;
case 15:return 55
break;
case 16:return 41
break;
case 17:return 34
break;
case 18:return 21
break;
case 19:return 31
break;
case 20:return 43
break;
case 21:return 36
break;
case 22:return 'FORWARD_SLASH'
break;
case 23:return 45
break;
case 24:yy_.yytext = yy_.yytext.slice(1,-1); return 57
break;
case 25:yy_.yytext = yy_.yytext.slice(1,-1); return 57
break;
case 26:return 60
break;
case 27:return 59
break;
case 28:return 56
break;
}
},
rules: [/^(?:$)/i,/^(?:[\r\n]+)/i,/^(?:%%)/i,/^(?:[\s]+)/i,/^(?:[A-Za-z]{1,}[A-Za-z0-9\.]*(?=[(]))/i,/^(?:subscribe\/)/i,/^(?:emit\/)/i,/^(?:define\/)/i,/^(?:Init\b)/i,/^(?:ByPass\b)/i,/^(?:[a-zA-Z]\w{0,254})/i,/^(?:\+)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:#)/i,/^(?:\$)/i,/^(?:,)/i,/^(?:\()/i,/^(?:<=)/i,/^(?:=>)/i,/^(?:=)/i,/^(?:\))/i,/^(?:\/)/i,/^(?:\?)/i,/^(?:'[^']+')/i,/^(?:"[^"]+")/i,/^(?:-?[0-9]+\.[0-9]+)/i,/^(?:-?[0-9]+)/i,/^(?:\[\])/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}